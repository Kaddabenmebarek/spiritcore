SET DEFINE OFF;
/**ACTION_PATTERN_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ACTION_PATTERN;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_ACTION_PATTERN 
AFTER DELETE OR INSERT OR UPDATE ON ACTIONPATTERNS 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ACTIONPATTERNS_AUD (REVTYPE,ACTION_ID,ACTION_PARAMETERS,ACTION_TYPE,CREDATE,CREUSER,ID,NO,PARENT_ID,SCHEDULE_ID,STAGE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ACTION_ID,:o.ACTION_PARAMETERS,:o.ACTION_TYPE,:o.CREDATE,:o.CREUSER,:o.ID,:o.NO,:o.PARENT_ID,:o.SCHEDULE_ID,:o.STAGE_ID,CURRENT_DATE,:o.UPDUSER);
    ELSE
        INSERT INTO ACTIONPATTERNS_AUD (REVTYPE,ACTION_ID,ACTION_PARAMETERS,ACTION_TYPE,CREDATE,CREUSER,ID,NO,PARENT_ID,SCHEDULE_ID,STAGE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ACTION_ID,:n.ACTION_PARAMETERS,:n.ACTION_TYPE,:n.CREDATE,:n.CREUSER,:n.ID,:n.NO,:n.PARENT_ID,:n.SCHEDULE_ID,:n.STAGE_ID,CURRENT_DATE,:n.UPDUSER);
    END IF; 
END; 

SET DEFINE OFF;
/**ADMINISTRATION_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ADMINISTRATION;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_ADMINISTRATION 
AFTER DELETE OR INSERT OR UPDATE ON ADMINISTRATION 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ADMINISTRATION_AUD (REVTYPE,ADM_COMMENT,BATCH_ID,BATCH_TYPE,BIOSAMPLE_ID,CREDATE,CREUSER,EFFECTIVE_AMOUNT_UNIT_ID,EFFECTIVE_AMOUNT_VALUE,ELB,EXECUTION_DATE,ID,NAMED_TREATMENT_ID,PHASE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ADM_COMMENT,:o.BATCH_ID,:o.BATCH_TYPE,:o.BIOSAMPLE_ID,:o.CREDATE,:o.CREUSER,:o.EFFECTIVE_AMOUNT_UNIT_ID,:o.EFFECTIVE_AMOUNT_VALUE,:o.ELB,:o.EXECUTION_DATE,:o.ID,:o.NAMED_TREATMENT_ID,:o.PHASE_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO ADMINISTRATION_AUD (REVTYPE,ADM_COMMENT,BATCH_ID,BATCH_TYPE,BIOSAMPLE_ID,CREDATE,CREUSER,EFFECTIVE_AMOUNT_UNIT_ID,EFFECTIVE_AMOUNT_VALUE,ELB,EXECUTION_DATE,ID,NAMED_TREATMENT_ID,PHASE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ADM_COMMENT,:n.BATCH_ID,:n.BATCH_TYPE,:n.BIOSAMPLE_ID,:n.CREDATE,:n.CREUSER,:n.EFFECTIVE_AMOUNT_UNIT_ID,:n.EFFECTIVE_AMOUNT_VALUE,:n.ELB,:n.EXECUTION_DATE,:n.ID,:n.NAMED_TREATMENT_ID,:n.PHASE_ID,:n.UPDDATE,:n.UPDUSER);
    END IF; 
END;


SET DEFINE OFF;
/**ASSAY_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ASSAY;
create or replace TRIGGER AUDIT_TRIGGER_ASSAY
AFTER DELETE OR INSERT OR UPDATE ON ASSAY 
REFERENCING NEW AS n OLD as o
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ASSAY_AUD (REVTYPE,CATEGORY,CRE_DATE,CRE_USER,DESCRIPTION,DISABLED,ID,NAME,UPD_DATE,UPD_USER) VALUES(AUDIT_TYPE,:o.CATEGORY,:o.CRE_DATE,:o.CRE_USER,:o.DESCRIPTION,:o.DISABLED,:o.ID,:o.NAME,:o.UPD_DATE,:n.UPD_USER);
    ELSE
        INSERT INTO ASSAY_AUD (REVTYPE,CATEGORY,CRE_DATE,CRE_USER,DESCRIPTION,DISABLED,ID,NAME,UPD_DATE,UPD_USER) VALUES(AUDIT_TYPE,:n.CATEGORY,:n.CRE_DATE,:n.CRE_USER,:n.DESCRIPTION,:n.DISABLED,:n.ID,:n.NAME,:n.UPD_DATE,:n.UPD_USER);
    END IF;
END;


SET DEFINE OFF;
/**ASSAY_ATTRIBUTE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ASSAY_ATTRIBUTE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_ASSAY_ATTRIBUTE 
AFTER DELETE OR INSERT OR UPDATE ON ASSAY_ATTRIBUTE 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ASSAY_ATTRIBUTE_AUD (REVTYPE,ASSAY_ID,DATATYPE,ID,IDX,NAME,OUTPUT_TYPE,PARAMETERS,REQUIRED,UNIT) VALUES(AUDIT_TYPE,:o.ASSAY_ID,:o.DATATYPE,:o.ID,:o.IDX,:o.NAME,:o.OUTPUT_TYPE,:o.PARAMETERS,:o.REQUIRED,:o.UNIT);
    ELSE
        INSERT INTO ASSAY_ATTRIBUTE_AUD (REVTYPE,ASSAY_ID,DATATYPE,ID,IDX,NAME,OUTPUT_TYPE,PARAMETERS,REQUIRED,UNIT) VALUES(AUDIT_TYPE,:n.ASSAY_ID,:n.DATATYPE,:n.ID,:n.IDX,:n.NAME,:n.OUTPUT_TYPE,:n.PARAMETERS,:n.REQUIRED,:n.UNIT);
    END IF; 
END; 


SET DEFINE OFF;
/**ASSAY_RESULT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ASSAY_RESULT;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_ASSAY_RESULT 
AFTER DELETE OR INSERT OR UPDATE ON ASSAY_RESULT 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ASSAY_RESULT_AUD (REVTYPE,ASSAY_ID,BIOSAMPLE_ID,COMMENTS,CRE_DATE,CRE_USER,ELB,EXECUTION_DATE,ID,PHASE_ID,QUALITY,STUDY_ID,UPD_DATE,UPD_USER) VALUES(AUDIT_TYPE,:o.ASSAY_ID,:o.BIOSAMPLE_ID,:o.COMMENTS,:o.CRE_DATE,:o.CRE_USER,:o.ELB,:o.EXECUTION_DATE,:o.ID,:o.PHASE_ID,:o.QUALITY,:o.STUDY_ID,CURRENT_DATE,:o.UPD_USER);
    ELSE
        INSERT INTO ASSAY_RESULT_AUD (REVTYPE,ASSAY_ID,BIOSAMPLE_ID,COMMENTS,CRE_DATE,CRE_USER,ELB,EXECUTION_DATE,ID,PHASE_ID,QUALITY,STUDY_ID,UPD_DATE,UPD_USER) VALUES(AUDIT_TYPE,:n.ASSAY_ID,:n.BIOSAMPLE_ID,:n.COMMENTS,:n.CRE_DATE,:n.CRE_USER,:n.ELB,:n.EXECUTION_DATE,:n.ID,:n.PHASE_ID,:n.QUALITY,:n.STUDY_ID,CURRENT_DATE,:n.UPD_USER);
    END IF; 
END; 


SET DEFINE OFF;
/**ASSAY_RESULT_VALUE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ASSAY_RESULT_VALUE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_ASSAY_RESULT_VALUE 
BEFORE DELETE OR INSERT OR UPDATE  ON ASSAY_RESULT_VALUE 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ASSAY_RESULT_VALUE_AUD (REVTYPE,ASSAY_ATTRIBUTE_ID,ASSAY_RESULT_ID,CRE_DATE,CRE_USER,DOCUMENT_ID,ID,NUMERIC_VALUE,TEXT_VALUE,UPD_DATE,UPD_USER) VALUES(AUDIT_TYPE,:o.ASSAY_ATTRIBUTE_ID,:o.ASSAY_RESULT_ID,:o.CRE_DATE,:o.CRE_USER,:o.DOCUMENT_ID,:o.ID,:o.NUMERIC_VALUE,:o.TEXT_VALUE,CURRENT_DATE,:o.UPD_USER);
    ELSE
        INSERT INTO ASSAY_RESULT_VALUE_AUD (REVTYPE,ASSAY_ATTRIBUTE_ID,ASSAY_RESULT_ID,CRE_DATE,CRE_USER,DOCUMENT_ID,ID,NUMERIC_VALUE,TEXT_VALUE,UPD_DATE,UPD_USER) VALUES(AUDIT_TYPE,:n.ASSAY_ATTRIBUTE_ID,:n.ASSAY_RESULT_ID,:n.CRE_DATE,:n.CRE_USER,:n.DOCUMENT_ID,:n.ID,:n.NUMERIC_VALUE,:n.TEXT_VALUE,CURRENT_DATE,:n.UPD_USER);
    END IF; 
END; 


SET DEFINE OFF;
/**ASSIGNMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ASSIGNMENT;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_ASSIGNMENT 
BEFORE DELETE OR INSERT OR UPDATE ON ASSIGNMENT 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ASSIGNMENT_AUD (REVTYPE,BIOSAMPLE_ID,CREDATE,CREUSER,DATALIST,ELB,ID,NAME,NO,REMOVE_DATE,STAGE_ID,STRATIFICATION,SUBGROUP_ID,UPDDATE,UPDUSER,WEIGHT) VALUES(AUDIT_TYPE,:o.BIOSAMPLE_ID,:o.CREDATE,:o.CREUSER,:o.DATALIST,:o.ELB,:o.ID,:o.NAME,:o.NO,:o.REMOVE_DATE,:o.STAGE_ID,:o.STRATIFICATION,:o.SUBGROUP_ID,CURRENT_DATE,:o.UPDUSER,:o.WEIGHT);
    ELSE
        INSERT INTO ASSIGNMENT_AUD (REVTYPE,BIOSAMPLE_ID,CREDATE,CREUSER,DATALIST,ELB,ID,NAME,NO,REMOVE_DATE,STAGE_ID,STRATIFICATION,SUBGROUP_ID,UPDDATE,UPDUSER,WEIGHT) VALUES(AUDIT_TYPE,:n.BIOSAMPLE_ID,:n.CREDATE,:n.CREUSER,:n.DATALIST,:n.ELB,:n.ID,:n.NAME,:n.NO,:n.REMOVE_DATE,:n.STAGE_ID,:n.STRATIFICATION,:n.SUBGROUP_ID,CURRENT_DATE,:n.UPDUSER,:n.WEIGHT);
    END IF; 
END;


SET DEFINE OFF;
/**ASSIGNMENT_PATTERN_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ASSIGNMENT_PATTERN;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_ASSIGNMENT_PATTERN
BEFORE DELETE OR INSERT OR UPDATE ON ASSIGNMENT_PATTERN 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ASSIGNMENT_PATTERN_AUD (REVTYPE,ASSIGNMENT_ID,ID,PATTERN_ID) VALUES(AUDIT_TYPE,:o.ASSIGNMENT_ID,:o.ID,:o.PATTERN_ID);
    ELSE
        INSERT INTO ASSIGNMENT_PATTERN_AUD (REVTYPE,ASSIGNMENT_ID,ID,PATTERN_ID) VALUES(AUDIT_TYPE,:n.ASSIGNMENT_ID,:n.ID,:n.PATTERN_ID);
    END IF; 
END;


SET DEFINE OFF;
/**BIOLOCATION_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOLOCATION;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_BIOLOCATION 
AFTER DELETE OR INSERT OR UPDATE ON BIOLOCATION 
REFERENCING NEW AS n OLD as o
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOLOCATION_AUD (REVTYPE,CREDATE,CREUSER,DEPARTMENT_ID,DESCRIPTION,FLAG,ID,LABELING,LOCATIONTYPE,NAME,NCOLS,NROWS,PARENT_ID,PRIVACY,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.CREDATE,:o.CREUSER,:o.DEPARTMENT_ID,:o.DESCRIPTION,:o.FLAG,:o.ID,:o.LABELING,:o.LOCATIONTYPE,:o.NAME,:o.NCOLS,:o.NROWS,:o.PARENT_ID,:o.PRIVACY,CURRENT_DATE,:o.UPDUSER);
    ELSE
        INSERT INTO BIOLOCATION_AUD (REVTYPE,CREDATE,CREUSER,DEPARTMENT_ID,DESCRIPTION,FLAG,ID,LABELING,LOCATIONTYPE,NAME,NCOLS,NROWS,PARENT_ID,PRIVACY,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.CREDATE,:n.CREUSER,:n.DEPARTMENT_ID,:n.DESCRIPTION,:n.FLAG,:n.ID,:n.LABELING,:n.LOCATIONTYPE,:n.NAME,:n.NCOLS,:n.NROWS,:n.PARENT_ID,:n.PRIVACY,CURRENT_DATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**BIOSAMPLE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOSAMPLE;
create or replace TRIGGER AUDIT_TRIGGER_BIOSAMPLE 
BEFORE DELETE OR INSERT OR UPDATE ON BIOSAMPLE 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOSAMPLE_AUD (REVTYPE,AMOUNT,ATTACHEDSAMPLING_ID,BIOTYPE_ID,COMMENTS,CONTAINERID,CONTAINER_INDEX,CONTAINERTYPE,CREDATE,CREUSER,DEPARTMENT_ID,ELB,END_DATE,ENDPHASE_ID,EXPIRYDATE,ID,INHERITED_DATE,INHERITEDPHASE_ID,LASTACTION,LOCALID,LOCATION_ID,LOCATION_POS,PARENT_ID,QUALITY,SAMPLEID,STATE,STUDY_ID,UPDDATE,UPDUSER,TOP_PARENT_ID) VALUES(AUDIT_TYPE,:o.AMOUNT,:o.ATTACHEDSAMPLING_ID,:o.BIOTYPE_ID,:o.COMMENTS,:o.CONTAINERID,:o.CONTAINER_INDEX,:o.CONTAINERTYPE,:o.CREDATE,:o.CREUSER,:o.DEPARTMENT_ID,:o.ELB,:o.END_DATE,:o.ENDPHASE_ID,:o.EXPIRYDATE,:o.ID,:o.INHERITED_DATE,:o.INHERITEDPHASE_ID,:o.LASTACTION,:o.LOCALID,:o.LOCATION_ID,:o.LOCATION_POS,:o.PARENT_ID,:o.QUALITY,:o.SAMPLEID,:o.STATE,:o.STUDY_ID,:o.UPDDATE,:o.UPDUSER,:o.TOP_PARENT_ID);
    ELSE
        INSERT INTO BIOSAMPLE_AUD (REVTYPE,AMOUNT,ATTACHEDSAMPLING_ID,BIOTYPE_ID,COMMENTS,CONTAINERID,CONTAINER_INDEX,CONTAINERTYPE,CREDATE,CREUSER,DEPARTMENT_ID,ELB,END_DATE,ENDPHASE_ID,EXPIRYDATE,ID,INHERITED_DATE,INHERITEDPHASE_ID,LASTACTION,LOCALID,LOCATION_ID,LOCATION_POS,PARENT_ID,QUALITY,SAMPLEID,STATE,STUDY_ID,UPDDATE,UPDUSER,TOP_PARENT_ID) VALUES(AUDIT_TYPE,:n.AMOUNT,:n.ATTACHEDSAMPLING_ID,:n.BIOTYPE_ID,:n.COMMENTS,:n.CONTAINERID,:n.CONTAINER_INDEX,:n.CONTAINERTYPE,:n.CREDATE,:n.CREUSER,:n.DEPARTMENT_ID,:n.ELB,:n.END_DATE,:n.ENDPHASE_ID,:n.EXPIRYDATE,:n.ID,:n.INHERITED_DATE,:n.INHERITEDPHASE_ID,:n.LASTACTION,:n.LOCALID,:n.LOCATION_ID,:n.LOCATION_POS,:n.PARENT_ID,:n.QUALITY,:n.SAMPLEID,:n.STATE,:n.STUDY_ID,:n.UPDDATE,:n.UPDUSER,:n.TOP_PARENT_ID);
    END IF;
END;


SET DEFINE OFF;
/**BIOSAMPLE_BIOSAMPLE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOSAMPLE_BIOSAMPLE;
create or replace TRIGGER AUDIT_TRIGGER_BIOSAMPLE_BIOSAMPLE 
BEFORE DELETE OR INSERT OR UPDATE ON BIOSAMPLE_BIOSAMPLE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOSAMPLE_BIOSAMPLE_AUD (REVTYPE,BIOSAMPLE_ID,BIOTYPEMETADATA_ID,LINKED_BIOSAMPLE_ID,ID) VALUES(AUDIT_TYPE,:o.BIOSAMPLE_ID,:o.BIOTYPEMETADATA_ID,:o.LINKED_BIOSAMPLE_ID,:o.ID);
    ELSE
        INSERT INTO BIOSAMPLE_BIOSAMPLE_AUD (REVTYPE,BIOSAMPLE_ID,BIOTYPEMETADATA_ID,LINKED_BIOSAMPLE_ID,ID) VALUES(AUDIT_TYPE,:n.BIOSAMPLE_ID,:n.BIOTYPEMETADATA_ID,:n.LINKED_BIOSAMPLE_ID,:n.ID);
    END IF;
END;


SET DEFINE OFF;
/**BIOSAMPLE_DOCUMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOSAMPLE_DOCUMENT;
create or replace TRIGGER AUDIT_TRIGGER_BIOSAMPLE_DOCUMENT
BEFORE DELETE OR INSERT OR UPDATE ON BIOSAMPLE_DOCUMENT
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOSAMPLE_DOCUMENT_AUD (REVTYPE,BIOSAMPLE_ID,BIOTYPEMETADATA_ID,LINKEDDOCUMENT_ID) VALUES(AUDIT_TYPE,:o.BIOSAMPLE_ID,:o.BIOTYPEMETADATA_ID,:o.LINKEDDOCUMENT_ID);
    ELSE
        INSERT INTO BIOSAMPLE_DOCUMENT_AUD (REVTYPE,BIOSAMPLE_ID,BIOTYPEMETADATA_ID,LINKEDDOCUMENT_ID) VALUES(AUDIT_TYPE,:n.BIOSAMPLE_ID,:n.BIOTYPEMETADATA_ID,:n.LINKEDDOCUMENT_ID);
    END IF;
END;


SET DEFINE OFF;
/**BIOSAMPLE_ENCLOSURE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOSAMPLE_ENCLOSURE;
create or replace TRIGGER AUDIT_TRIGGER_BIOSAMPLE_ENCLOSURE
BEFORE DELETE OR INSERT OR UPDATE ON BIOSAMPLE_ENCLOSURE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOSAMPLE_ENCLOSURE_AUD (REVTYPE,BIOSAMPLE_ID,CREDATE,CREUSER,ENCLOSURE_ID,ID,PHASEIN_ID,PHASEOUT_ID,STUDY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.BIOSAMPLE_ID,:o.CREDATE,:o.CREUSER,:o.ENCLOSURE_ID,:o.ID,:o.PHASEIN_ID,:o.PHASEOUT_ID,:o.STUDY_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO BIOSAMPLE_ENCLOSURE_AUD (REVTYPE,BIOSAMPLE_ID,CREDATE,CREUSER,ENCLOSURE_ID,ID,PHASEIN_ID,PHASEOUT_ID,STUDY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.BIOSAMPLE_ID,:n.CREDATE,:n.CREUSER,:n.ENCLOSURE_ID,:n.ID,:n.PHASEIN_ID,:n.PHASEOUT_ID,:n.STUDY_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**BIOTYPE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOTYPE;
create or replace TRIGGER AUDIT_TRIGGER_BIOTYPE
BEFORE DELETE OR INSERT OR UPDATE ON BIOTYPE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOTYPE_AUD (REVTYPE,AMOUNTUNIT,CATEGORY,CONTAINERTYPE,CREDATE,CREUSER,DESCRIPTION,HIDECONTAINER,HIDESAMPLEID,ID,ISABSTRACT,ISHIDDEN,NAME,NAMEAUTOCOMPLETE,NAMELABEL,NAMEREQUIRED,NAMEUNIQUE,PARENT_ID,PREFIX,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.AMOUNTUNIT,:o.CATEGORY,:o.CONTAINERTYPE,:o.CREDATE,:o.CREUSER,:o.DESCRIPTION,:o.HIDECONTAINER,:o.HIDESAMPLEID,:o.ID,:o.ISABSTRACT,:o.ISHIDDEN,:o.NAME,:o.NAMEAUTOCOMPLETE,:o.NAMELABEL,:o.NAMEREQUIRED,:o.NAMEUNIQUE,:o.PARENT_ID,:o.PREFIX,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO BIOTYPE_AUD (REVTYPE,AMOUNTUNIT,CATEGORY,CONTAINERTYPE,CREDATE,CREUSER,DESCRIPTION,HIDECONTAINER,HIDESAMPLEID,ID,ISABSTRACT,ISHIDDEN,NAME,NAMEAUTOCOMPLETE,NAMELABEL,NAMEREQUIRED,NAMEUNIQUE,PARENT_ID,PREFIX,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.AMOUNTUNIT,:n.CATEGORY,:n.CONTAINERTYPE,:n.CREDATE,:n.CREUSER,:n.DESCRIPTION,:n.HIDECONTAINER,:n.HIDESAMPLEID,:n.ID,:n.ISABSTRACT,:n.ISHIDDEN,:n.NAME,:n.NAMEAUTOCOMPLETE,:n.NAMELABEL,:n.NAMEREQUIRED,:n.NAMEUNIQUE,:n.PARENT_ID,:n.PREFIX,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**BIOTYPE_METADATA_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOTYPE_METADATA;
create or replace TRIGGER AUDIT_TRIGGER_BIOTYPE_METADATA
BEFORE DELETE OR INSERT OR UPDATE ON BIOTYPE_METADATA
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOTYPE_METADATA_AUD (REVTYPE,BIOTYPE_ID,CREDATE,CREUSER,DATATYPE,DESCRIPTION,HIDEFROMDISPLAY,ID,IDX,NAME,PARAMETERS,REQUIRED,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.BIOTYPE_ID,:o.CREDATE,:o.CREUSER,:o.DATATYPE,:o.DESCRIPTION,:o.HIDEFROMDISPLAY,:o.ID,:o.IDX,:o.NAME,:o.PARAMETERS,:o.REQUIRED,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO BIOTYPE_METADATA_AUD (REVTYPE,BIOTYPE_ID,CREDATE,CREUSER,DATATYPE,DESCRIPTION,HIDEFROMDISPLAY,ID,IDX,NAME,PARAMETERS,REQUIRED,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.BIOTYPE_ID,:n.CREDATE,:n.CREUSER,:n.DATATYPE,:n.DESCRIPTION,:n.HIDEFROMDISPLAY,:n.ID,:n.IDX,:n.NAME,:n.PARAMETERS,:n.REQUIRED,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**BIOTYPE_METADATA_BIOSAMPLE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_BIOTYPE_METADATA_BIOSAMPLE;
create or replace TRIGGER AUDIT_TRIGGER_BIOTYPE_METADATA_BIOSAMPLE
BEFORE DELETE OR INSERT OR UPDATE ON BIOTYPE_METADATA_BIOSAMPLE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOTYPE_METADATA_BIOSAMPLE_AUD (REVTYPE,BIOSAMPLE_ID,ID,METADATA_ID,VALUE) VALUES(AUDIT_TYPE,:o.BIOSAMPLE_ID,:o.ID,:o.METADATA_ID,:o.VALUE);
    ELSE
        INSERT INTO BIOTYPE_METADATA_BIOSAMPLE_AUD (REVTYPE,BIOSAMPLE_ID,ID,METADATA_ID,VALUE) VALUES(AUDIT_TYPE,:n.BIOSAMPLE_ID,:n.ID,:n.METADATA_ID,:n.VALUE);
    END IF;
END;


SET DEFINE OFF;
/**DOCUMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_DOCUMENT;
create or replace TRIGGER AUDIT_TRIGGER_DOCUMENT
BEFORE DELETE OR INSERT OR UPDATE ON DOCUMENT
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO BIOTYPE_METADATAVALUE_AUD (REVTYPE/*,BIOTYPEMETADATA_ID*/,CREDATE,CREUSER,ID,UPDDATE,UPDUSER/*,VALUE*/) VALUES(AUDIT_TYPE,/*:o.BIOTYPEMETADATA_ID,*/:o.CREDATE,:o.CREUSER,:o.ID,:o.UPDDATE,:o.UPDUSER/*,:o.VALUE*/);
    ELSE
        INSERT INTO BIOTYPE_METADATAVALUE_AUD (REVTYPE/*,BIOTYPEMETADATA_ID*/,CREDATE,CREUSER,ID,UPDDATE,UPDUSER/*,VALUE*/) VALUES(AUDIT_TYPE,/*:n.BIOTYPEMETADATA_ID,*/:n.CREDATE,:n.CREUSER,:n.ID,:n.UPDDATE,:n.UPDUSER/*,:n.VALUE*/);
    END IF;
END;


SET DEFINE OFF;
/**DOCUMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_DOCUMENT;
create or replace TRIGGER AUDIT_TRIGGER_DOCUMENT
BEFORE DELETE OR INSERT OR UPDATE ON DOCUMENT
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO DOCUMENT_AUD (REVTYPE,CREDATE,CREUSER,FILENAME,ID,TYPE,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.CREDATE,:o.CREUSER,:o.FILENAME,:o.ID,:o.TYPE,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO DOCUMENT_AUD (REVTYPE,CREDATE,CREUSER,FILENAME,ID,TYPE,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.CREDATE,:n.CREUSER,:n.FILENAME,:n.ID,:n.TYPE,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**ENCLOSURE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_ENCLOSURE;
create or replace TRIGGER AUDIT_TRIGGER_ENCLOSURE
BEFORE DELETE OR INSERT OR UPDATE ON ENCLOSURE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO ENCLOSURE_AUD (REVTYPE,ID,NAME,STUDY_ID) VALUES(AUDIT_TYPE,:o.ID,:o.NAME,:o.STUDY_ID);
    ELSE
        INSERT INTO ENCLOSURE_AUD (REVTYPE,ID,NAME,STUDY_ID) VALUES(AUDIT_TYPE,:n.ID,:n.NAME,:n.STUDY_ID);
    END IF;
END;


SET DEFINE OFF;
/**EXECUTION_DETAILS_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_EXECUTION_DETAILS;
create or replace TRIGGER AUDIT_TRIGGER_EXECUTION_DETAILS
BEFORE DELETE OR INSERT OR UPDATE ON EXECUTION_DETAILS
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO EXECUTION_DETAILS_AUD (REVTYPE,ASSIGNMENT_ID,CREDATE,CREUSER,DEVIATION,ID,PHASELINK_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ASSIGNMENT_ID,:o.CREDATE,:o.CREUSER,:o.DEVIATION,:o.ID,:o.PHASELINK_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO EXECUTION_DETAILS_AUD (REVTYPE,ASSIGNMENT_ID,CREDATE,CREUSER,DEVIATION,ID,PHASELINK_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ASSIGNMENT_ID,:n.CREDATE,:n.CREUSER,:n.DEVIATION,:n.ID,:n.PHASELINK_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**FOOD_WATER_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_FOOD_WATER;
create or replace TRIGGER AUDIT_TRIGGER_FOOD_WATER
BEFORE DELETE OR INSERT OR UPDATE ON FOOD_WATER
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO FOOD_WATER_AUD (REVTYPE,CREDATE,CREUSER,ENCLOSURE_ID,FOODTARE,FOODWEIGHT,FW_DATE,ID,UPDDATE,UPDUSER,WATERTARE,WATERWEIGHT) VALUES(AUDIT_TYPE,:o.CREDATE,:o.CREUSER,:o.ENCLOSURE_ID,:o.FOODTARE,:o.FOODWEIGHT,:o.FW_DATE,:o.ID,:o.UPDDATE,:o.UPDUSER,:o.WATERTARE,:o.WATERWEIGHT);
    ELSE
        INSERT INTO FOOD_WATER_AUD (REVTYPE,CREDATE,CREUSER,ENCLOSURE_ID,FOODTARE,FOODWEIGHT,FW_DATE,ID,UPDDATE,UPDUSER,WATERTARE,WATERWEIGHT) VALUES(AUDIT_TYPE,:n.CREDATE,:n.CREUSER,:n.ENCLOSURE_ID,:n.FOODTARE,:n.FOODWEIGHT,:n.FW_DATE,:n.ID,:n.UPDDATE,:n.UPDUSER,:n.WATERTARE,:n.WATERWEIGHT);
    END IF;
END;


SET DEFINE OFF;
/**GROUP_BIOTYPE_METADATAVALUE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_GROUP_BIOTYPE_METADATAVALUE;
create or replace TRIGGER AUDIT_TRIGGER_GROUP_BIOTYPE_METADATAVALUE
BEFORE DELETE OR INSERT OR UPDATE ON GROUP_BIOTYPE_METADATAVALUE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO GROUP_BIOTYPE_METADATA_VALUE_AUD (REVTYPE,BIOTYPE_METADATA_VALUE_ID,CREDATE,CREUSER,GROUP_ID,ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.BIOTYPE_METADATA_VALUE_ID,:o.CREDATE,:o.CREUSER,:o.GROUP_ID,:o.ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO GROUP_BIOTYPE_METADATA_VALUE_AUD (REVTYPE,BIOTYPE_METADATA_VALUE_ID,CREDATE,CREUSER,GROUP_ID,ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.BIOTYPE_METADATA_VALUE_ID,:n.CREDATE,:n.CREUSER,:n.GROUP_ID,:n.ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**GROUP_PATTERN_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_GROUP_PATTERN;
create or replace TRIGGER AUDIT_TRIGGER_GROUP_PATTERN
BEFORE DELETE OR INSERT OR UPDATE ON GROUP_PATTERN
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO GROUP_PATTERN_AUD (REVTYPE,ACTIONPATTERN_ID,CREDATE,CREUSER,GROUP_ID,ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ACTIONPATTERN_ID,:o.CREDATE,:o.CREUSER,:o.GROUP_ID,:o.ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO GROUP_PATTERN_AUD (REVTYPE,ACTIONPATTERN_ID,CREDATE,CREUSER,GROUP_ID,ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ACTIONPATTERN_ID,:n.CREDATE,:n.CREUSER,:n.GROUP_ID,:n.ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**NAMEDSAMPLING_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_NAMEDSAMPLING;
create or replace TRIGGER AUDIT_TRIGGER_NAMEDSAMPLING
BEFORE DELETE OR INSERT OR UPDATE ON NAMEDSAMPLING
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO NAMEDSAMPLING_AUD (REVTYPE,COLOR,CREDATE,CREUSER,ID,NAME,NECROPSY,STUDY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.COLOR,:o.CREDATE,:o.CREUSER,:o.ID,:o.NAME,:o.NECROPSY,:o.STUDY_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO NAMEDSAMPLING_AUD (REVTYPE,COLOR,CREDATE,CREUSER,ID,NAME,NECROPSY,STUDY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.COLOR,:n.CREDATE,:n.CREUSER,:n.ID,:n.NAME,:n.NECROPSY,:n.STUDY_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**NAMEDTREATMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_NAMEDTREATMENT;
create or replace TRIGGER AUDIT_TRIGGER_NAMEDTREATMENT
BEFORE DELETE OR INSERT OR UPDATE ON NAMEDTREATMENT
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO NAMEDTREATMENT_AUD (REVTYPE,COLOR,COMMENTS,CREDATE,CREUSER,DISEASE,ID,LOCATION,NAME,PPG_TREATMENT_INSTANCE_ID,SPI_TREATMENT_ID,STUDY_ID,SURGERY,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.COLOR,:o.COMMENTS,:o.CREDATE,:o.CREUSER,:o.DISEASE,:o.ID,:o.LOCATION,:o.NAME,:o.PPG_TREATMENT_INSTANCE_ID,:o.SPI_TREATMENT_ID,:o.STUDY_ID,:o.SURGERY,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO NAMEDTREATMENT_AUD (REVTYPE,COLOR,COMMENTS,CREDATE,CREUSER,DISEASE,ID,LOCATION,NAME,PPG_TREATMENT_INSTANCE_ID,SPI_TREATMENT_ID,STUDY_ID,SURGERY,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.COLOR,:o.COMMENTS,:n.CREDATE,:n.CREUSER,:n.DISEASE,:n.ID,:n.LOCATION,:n.NAME,:n.PPG_TREATMENT_INSTANCE_ID,:n.SPI_TREATMENT_ID,:n.STUDY_ID,:n.SURGERY,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**PHASE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_PHASE;
create or replace TRIGGER AUDIT_TRIGGER_PHASE
BEFORE DELETE OR INSERT OR UPDATE ON PHASE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO PHASE_AUD (REVTYPE,ID,LABEL,PHASE,STAGE_ID) VALUES(AUDIT_TYPE,:o.ID,:o.LABEL,:o.PHASE,:o.STAGE_ID);
    ELSE
        INSERT INTO PHASE_AUD (REVTYPE,ID,LABEL,PHASE,STAGE_ID) VALUES(AUDIT_TYPE,:n.ID,:n.LABEL,:n.PHASE,:n.STAGE_ID);
    END IF;
END;


SET DEFINE OFF;
/**PLANNED_SAMPLE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_PLANNED_SAMPLE;
create or replace TRIGGER AUDIT_TRIGGER_PLANNED_SAMPLE
BEFORE DELETE OR INSERT OR UPDATE ON PLANNED_SAMPLE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO PLANNED_SAMPLE_AUD (REVTYPE,BIOSAMPLE_ID,CRE_DATE,CRE_USER,DATALIST,ID,NAME,STAGE_ID,UPD_DATE,UPD_USER,WEIGHT) VALUES(AUDIT_TYPE,:o.BIOSAMPLE_ID,:o.CRE_DATE,:o.CRE_USER,:o.DATALIST,:o.ID,:o.NAME,:o.STAGE_ID,:o.UPD_DATE,:o.UPD_USER,:o.WEIGHT);
    ELSE
        INSERT INTO PLANNED_SAMPLE_AUD (REVTYPE,BIOSAMPLE_ID,CRE_DATE,CRE_USER,DATALIST,ID,NAME,STAGE_ID,UPD_DATE,UPD_USER,WEIGHT) VALUES(AUDIT_TYPE,:n.BIOSAMPLE_ID,:n.CRE_DATE,:n.CRE_USER,:n.DATALIST,:n.ID,:n.NAME,:n.STAGE_ID,:n.UPD_DATE,:n.UPD_USER,:n.WEIGHT);
    END IF;
END;


SET DEFINE OFF;
/**PROPERTY_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_PROPERTY;
create or replace TRIGGER AUDIT_TRIGGER_PROPERTY
BEFORE DELETE OR INSERT OR UPDATE ON PROPERTY
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO PROPERTY_AUD (REVTYPE,ID,MANDATORY,NAME) VALUES(AUDIT_TYPE,:o.ID,:o.MANDATORY,:o.NAME);
    ELSE
        INSERT INTO PROPERTY_AUD (REVTYPE,ID,MANDATORY,NAME) VALUES(AUDIT_TYPE,:n.ID,:n.MANDATORY,:n.NAME);
    END IF;
END;


SET DEFINE OFF;
/**PROPERTY_LINK_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_PROPERTY_LINK;
create or replace TRIGGER AUDIT_TRIGGER_PROPERTY_LINK
BEFORE DELETE OR INSERT OR UPDATE ON PROPERTY_LINK
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO PROPERTY_LINK_AUD (REVTYPE,CRE_DATE,CRE_USER,ID,PROPERTY_ID,STUDY_ID,UPD_DATE,UPD_USER,VALUE) VALUES(AUDIT_TYPE,:o.CRE_DATE,:o.CRE_USER,:o.ID,:o.PROPERTY_ID,:o.STUDY_ID,:o.UPD_DATE,:o.UPD_USER,:o.VALUE);
    ELSE
        INSERT INTO PROPERTY_LINK_AUD (REVTYPE,CRE_DATE,CRE_USER,ID,PROPERTY_ID,STUDY_ID,UPD_DATE,UPD_USER,VALUE) VALUES(AUDIT_TYPE,:n.CRE_DATE,:n.CRE_USER,:n.ID,:n.PROPERTY_ID,:n.STUDY_ID,:n.UPD_DATE,:n.UPD_USER,:n.VALUE);
    END IF;
END;


SET DEFINE OFF;
/**RESULT_ASSIGNMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_RESULT_ASSIGNMENT;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_RESULT_ASSIGNMENT 
AFTER DELETE OR INSERT OR UPDATE ON RESULT_ASSIGNMENT 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO RESULT_ASSIGNMENT_AUD (REVTYPE,ASSAY_RESULT_ID,ASSIGNMENT_ID,CREDATE,CREUSER,ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ASSAY_RESULT_ID,:o.ASSIGNMENT_ID,:o.CREDATE,:o.CREUSER,:o.ID,CURRENT_DATE,:o.UPDUSER);
    ELSE
        INSERT INTO RESULT_ASSIGNMENT_AUD (REVTYPE,ASSAY_RESULT_ID,ASSIGNMENT_ID,CREDATE,CREUSER,ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ASSAY_RESULT_ID,:n.ASSIGNMENT_ID,:n.CREDATE,:n.CREUSER,:n.ID,CURRENT_DATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**SAMPLING_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SAMPLING;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SAMPLING 
AFTER DELETE OR INSERT OR UPDATE ON SAMPLING 
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SAMPLING_AUD (REVTYPE,AMOUNT,BIOTYPE_ID,COMMENTS,COMMENTSREQUIRED,CONTAINERTYPE,CREDATE,CREUSER,ID,LENGTHREQUIRED,LOCINDEX,PARENT_SAMPLING_ID,ROW_NUMBER,SAMPLENAME,UPDDATE,UPDUSER,WEIGHINGREQUIRED) VALUES(AUDIT_TYPE,:o.AMOUNT,:o.BIOTYPE_ID,:o.COMMENTS,:o.COMMENTSREQUIRED,:o.CONTAINERTYPE,:o.CREDATE,:o.CREUSER,:o.ID,:o.LENGTHREQUIRED,:o.LOCINDEX,:o.PARENT_SAMPLING_ID,:o.ROW_NUMBER,:o.SAMPLENAME,:o.UPDDATE,:o.UPDUSER,:o.WEIGHINGREQUIRED);
    ELSE
        INSERT INTO SAMPLING_AUD (REVTYPE,AMOUNT,BIOTYPE_ID,COMMENTS,COMMENTSREQUIRED,CONTAINERTYPE,CREDATE,CREUSER,ID,LENGTHREQUIRED,LOCINDEX,PARENT_SAMPLING_ID,ROW_NUMBER,SAMPLENAME,UPDDATE,UPDUSER,WEIGHINGREQUIRED) VALUES(AUDIT_TYPE,:n.AMOUNT,:n.BIOTYPE_ID,:n.COMMENTS,:n.COMMENTSREQUIRED,:n.CONTAINERTYPE,:n.CREDATE,:n.CREUSER,:n.ID,:n.LENGTHREQUIRED,:n.LOCINDEX,:n.PARENT_SAMPLING_ID,:n.ROW_NUMBER,:n.SAMPLENAME,:n.UPDDATE,:n.UPDUSER,:n.WEIGHINGREQUIRED);
    END IF;
END;


SET DEFINE OFF;
/**SAMPLING_MEASUREMENT_ATTRIBUTE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SAMPLING_MEASUREMENT_ATTRIBUTE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SAMPLING_MEASUREMENT_ATTRIBUTE 
AFTER DELETE OR INSERT OR UPDATE ON SAMPLING_MEASUREMENT_ATTRIBUTE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SAMPLING_MEASUREMENT_ATTRIBUTE_AUD (REVTYPE,ID,SAMPLING_MEASUREMENT_ID,ASSAY_ATTRIBUTE_ID,VALUE) VALUES(AUDIT_TYPE,:o.ID,:o.SAMPLING_MEASUREMENT_ID,:o.ASSAY_ATTRIBUTE_ID,:o.VALUE);
    ELSE
        INSERT INTO SAMPLING_MEASUREMENT_ATTRIBUTE_AUD (REVTYPE,ID,SAMPLING_MEASUREMENT_ID,ASSAY_ATTRIBUTE_ID,VALUE) VALUES(AUDIT_TYPE,:n.ID,:n.SAMPLING_MEASUREMENT_ID,:n.ASSAY_ATTRIBUTE_ID,:n.VALUE);
    END IF;
END;


SET DEFINE OFF;
/**SAMPLING_MEASUREMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SAMPLING_MEASUREMENT;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SAMPLING_MEASUREMENT
AFTER DELETE OR INSERT OR UPDATE ON SAMPLING_MEASUREMENT
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SAMPLING_MEASUREMENT_AUD (REVTYPE,CREDATE,CREUSER,ID,SAMPLING_ID,ASSAY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.CREDATE,:o.CREUSER,:o.ID,:o.SAMPLING_ID,:o.ASSAY_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO SAMPLING_MEASUREMENT_AUD (REVTYPE,CREDATE,CREUSER,ID,SAMPLING_ID,ASSAY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.CREDATE,:n.CREUSER,:n.ID,:n.SAMPLING_ID,:n.ASSAY_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**SAMPLING_PARAMETER_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SAMPLING_PARAMETER;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SAMPLING_PARAMETER
AFTER DELETE OR INSERT OR UPDATE ON SAMPLING_PARAMETER
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SAMPLING_PARAMETER_AUD (REVTYPE,BIOTYPEMETADATA_ID,CREDATE,CREUSER,ID,SAMPLING_ID,UPDDATE,UPDUSER,VALUE) VALUES(AUDIT_TYPE,:o.BIOTYPEMETADATA_ID,:o.CREDATE,:o.CREUSER,:o.ID,:o.SAMPLING_ID,:o.UPDDATE,:o.UPDUSER,:o.VALUE);
    ELSE
        INSERT INTO SAMPLING_PARAMETER_AUD (REVTYPE,BIOTYPEMETADATA_ID,CREDATE,CREUSER,ID,SAMPLING_ID,UPDDATE,UPDUSER,VALUE) VALUES(AUDIT_TYPE,:n.BIOTYPEMETADATA_ID,:n.CREDATE,:n.CREUSER,:n.ID,:n.SAMPLING_ID,:n.UPDDATE,:n.UPDUSER,:o.VALUE);
    END IF;
END;


SET DEFINE OFF;
/**SCHEDULE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SCHEDULE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SCHEDULE
AFTER DELETE OR INSERT OR UPDATE ON SCHEDULE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SCHEDULE_AUD (REVTYPE,CREDATE,CREUSER,ID,LAST_PHASE,RRULE,START_DATE,TIMEPOINTS,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.CREDATE,:o.CREUSER,:o.ID,:o.LAST_PHASE,:o.RRULE,:o.START_DATE,:o.TIMEPOINTS,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO SCHEDULE_AUD (REVTYPE,CREDATE,CREUSER,ID,LAST_PHASE,RRULE,START_DATE,TIMEPOINTS,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.CREDATE,:n.CREUSER,:n.ID,:n.LAST_PHASE,:n.RRULE,:n.START_DATE,:n.TIMEPOINTS,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**SCHEDULE_PHASE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SCHEDULE_PHASE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SCHEDULE_PHASE
AFTER DELETE OR INSERT OR UPDATE ON SCHEDULE_PHASE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SCHEDULE_PHASE_AUD (REVTYPE,CREDATE,CREUSER,ID,PHASE_ID,SCHEDULE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.CREDATE,:o.CREUSER,:o.ID,:o.PHASE_ID,:o.SCHEDULE_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO SCHEDULE_PHASE_AUD (REVTYPE,CREDATE,CREUSER,ID,PHASE_ID,SCHEDULE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.CREDATE,:n.CREUSER,:n.ID,:n.PHASE_ID,:n.SCHEDULE_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**SPIRIT_PROPERTY_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SPIRIT_PROPERTY;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SPIRIT_PROPERTY
AFTER DELETE OR INSERT OR UPDATE ON SPIRIT_PROPERTY
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SPIRIT_PROPERTY_AUD (REVTYPE,ID,VALUE) VALUES(AUDIT_TYPE,:o.ID,:o.VALUE);
    ELSE
        INSERT INTO SPIRIT_PROPERTY_AUD (REVTYPE,ID,VALUE) VALUES(AUDIT_TYPE,:n.ID,:n.VALUE);
    END IF;
END;


SET DEFINE OFF;
/**STAGE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_STAGE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_STAGE
AFTER DELETE OR INSERT OR UPDATE ON STAGE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO STAGE_AUD (REVTYPE,BIOTYPE_ID,CREDATE,CREUSER,DYNAMIC,ID,NAME,NEXT_ID,OFFSET_FROM_PREVIOUSSTAGE,OFFSET_OF_D0,STARTDATE,STARTING_DAY,STUDY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.BIOTYPE_ID,:o.CREDATE,:o.CREUSER,:o.DYNAMIC,:o.ID,:o.NAME,:o.NEXT_ID,:o.OFFSET_FROM_PREVIOUSSTAGE,:o.OFFSET_OF_D0,:o.STARTDATE,:o.STARTING_DAY,:o.STUDY_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO STAGE_AUD (REVTYPE,BIOTYPE_ID,CREDATE,CREUSER,DYNAMIC,ID,NAME,NEXT_ID,OFFSET_FROM_PREVIOUSSTAGE,OFFSET_OF_D0,STARTDATE,STARTING_DAY,STUDY_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.BIOTYPE_ID,:n.CREDATE,:n.CREUSER,:n.DYNAMIC,:n.ID,:n.NAME,:n.NEXT_ID,:n.OFFSET_FROM_PREVIOUSSTAGE,:n.OFFSET_OF_D0,:n.STARTDATE,:n.STARTING_DAY,:n.STUDY_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**STAGE_BIOTYPE_METADATAVALUE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_STAGE_BIOTYPE_METADATAVALUE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_STAGE_BIOTYPE_METADATAVALUE
AFTER DELETE OR INSERT OR UPDATE ON STAGE_BIOTYPE_METADATAVALUE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO STAGE_BIOTYPE_METADATAVALUE_AUD (REVTYPE,ID,BIOTYPE_METADATA_VALUE_ID,CREDATE,CREUSER,STAGE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ID,:o.BIOTYPE_METADATA_VALUE_ID,:o.CREDATE,:o.CREUSER,:o.STAGE_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO STAGE_BIOTYPE_METADATAVALUE_AUD (REVTYPE,ID,BIOTYPE_METADATA_VALUE_ID,CREDATE,CREUSER,STAGE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ID,:n.BIOTYPE_METADATA_VALUE_ID,:n.CREDATE,:n.CREUSER,:n.STAGE_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**STAGE_PATTERN_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_STAGE_PATTERN;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_STAGE_PATTERN
AFTER DELETE OR INSERT OR UPDATE ON STAGE_PATTERN
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO STAGE_PATTERN_AUD (REVTYPE,ACTIONPATTERN_ID,CREDATE,CREUSER,ID,STAGE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ACTIONPATTERN_ID,:o.CREDATE,:o.CREUSER,:o.ID,:o.STAGE_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO STAGE_PATTERN_AUD (REVTYPE,ACTIONPATTERN_ID,CREDATE,CREUSER,ID,STAGE_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ACTIONPATTERN_ID,:n.CREDATE,:n.CREUSER,:n.ID,:n.STAGE_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**STUDY_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_STUDY;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_STUDY
AFTER DELETE OR INSERT OR UPDATE ON STUDY
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO STUDY_AUD (REVTYPE,BLIND_USERS,COMMENTS,CREDATE,CREUSER,DEPARTMENT_ID,DEPARTMENT2_ID,DEPARTMENT3_ID,DESCRIPTION,ELB,ID,IVV,OWNER,PROJECT,READ_USERS,RND_EXPERIMENTER,STATUS,STUDYID,STUDYTYPE,SYNCHROSAMPLES,UPDDATE,UPDUSER,WRITE_USERS) VALUES(AUDIT_TYPE,:o.BLIND_USERS,:o.COMMENTS,:o.CREDATE,:o.CREUSER,:o.DEPARTMENT_ID,:o.DEPARTMENT2_ID,:o.DEPARTMENT3_ID,:o.DESCRIPTION,:o.ELB,:o.ID,:o.IVV,:o.OWNER,:o.PROJECT,:o.READ_USERS,:o.RND_EXPERIMENTER,:o.STATUS,:o.STUDYID,:o.STUDYTYPE,:o.SYNCHROSAMPLES,:o.UPDDATE,:o.UPDUSER,:o.WRITE_USERS);
    ELSE
        INSERT INTO STUDY_AUD (REVTYPE,BLIND_USERS,COMMENTS,CREDATE,CREUSER,DEPARTMENT_ID,DEPARTMENT2_ID,DEPARTMENT3_ID,DESCRIPTION,ELB,ID,IVV,OWNER,PROJECT,READ_USERS,RND_EXPERIMENTER,STATUS,STUDYID,STUDYTYPE,SYNCHROSAMPLES,UPDDATE,UPDUSER,WRITE_USERS) VALUES(AUDIT_TYPE,:n.BLIND_USERS,:n.COMMENTS,:n.CREDATE,:n.CREUSER,:n.DEPARTMENT_ID,:n.DEPARTMENT2_ID,:n.DEPARTMENT3_ID,:n.DESCRIPTION,:n.ELB,:n.ID,:n.IVV,:n.OWNER,:n.PROJECT,:n.READ_USERS,:n.RND_EXPERIMENTER,:n.STATUS,:n.STUDYID,:n.STUDYTYPE,:n.SYNCHROSAMPLES,:n.UPDDATE,:n.UPDUSER,:n.WRITE_USERS);
    END IF;
END;


SET DEFINE OFF;
/**STUDY_DOCUMENT_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_STUDY_DOCUMENT;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_STUDY_DOCUMENT
AFTER DELETE OR INSERT OR UPDATE ON STUDY_DOCUMENT
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO STUDY_DOCUMENT_AUD (REVTYPE,ID,DOCUMENTS_ID,STUDY_ID) VALUES(AUDIT_TYPE,:o.ID,:o.DOCUMENTS_ID,:o.STUDY_ID);
    ELSE
        INSERT INTO STUDY_DOCUMENT_AUD (REVTYPE,ID,DOCUMENTS_ID,STUDY_ID) VALUES(AUDIT_TYPE,:n.ID,:n.DOCUMENTS_ID,:n.STUDY_ID);
    END IF;
END;


SET DEFINE OFF;
/**STUDY_GROUP_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_STUDY_GROUP;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_STUDY_GROUP
AFTER DELETE OR INSERT OR UPDATE ON STUDY_GROUP
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO STUDY_GROUP_AUD (REVTYPE,COLOR,ID,IDX,NAME,SEVERITY,STAGE_ID) VALUES(AUDIT_TYPE,:o.COLOR,:o.ID,:o.IDX,:o.NAME,:o.SEVERITY,:o.STAGE_ID);
    ELSE
        INSERT INTO STUDY_GROUP_AUD (REVTYPE,COLOR,ID,IDX,NAME,SEVERITY,STAGE_ID) VALUES(AUDIT_TYPE,:n.COLOR,:n.ID,:n.IDX,:n.NAME,:n.SEVERITY,:n.STAGE_ID);
    END IF;
END;


SET DEFINE OFF;
/**SUBGROUP_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SUBGROUP;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SUBGROUP
AFTER DELETE OR INSERT OR UPDATE ON SUBGROUP
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SUBGROUP_AUD (REVTYPE,CREDATE,CREUSER,GROUP_ID,ID,NAME,NO,RANDOFROMGROUP_ID,RANDOFROMSUBGROUP_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.CREDATE,:o.CREUSER,:o.GROUP_ID,:o.ID,:o.NAME,:o.NO,:o.RANDOFROMGROUP_ID,:o.RANDOFROMSUBGROUP_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO SUBGROUP_AUD (REVTYPE,CREDATE,CREUSER,GROUP_ID,ID,NAME,NO,RANDOFROMGROUP_ID,RANDOFROMSUBGROUP_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.CREDATE,:n.CREUSER,:n.GROUP_ID,:n.ID,:n.NAME,:n.NO,:n.RANDOFROMGROUP_ID,:n.RANDOFROMSUBGROUP_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**SUBGROUP_BIOTYPE_METADATAVALUE_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SUBGROUP_BIOTYPE_METADATAVALUE;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SUBGROUP_BIOTYPE_METADATAVALUE
AFTER DELETE OR INSERT OR UPDATE ON SUBGROUP_BIOTYPE_METADATAVALUE
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SUBGROUP_BIOTYPE_METADATA_VALUE_AUD (REVTYPE,ID,BIOTYPE_METADATA_VALUE_ID,CREDATE,CREUSER,SUBGROUP_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ID,:o.BIOTYPE_METADATA_VALUE_ID,:o.CREDATE,:o.CREUSER,:o.SUBGROUP_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO SUBGROUP_BIOTYPE_METADATA_VALUE_AUD (REVTYPE,ID,BIOTYPE_METADATA_VALUE_ID,CREDATE,CREUSER,SUBGROUP_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ID,:n.BIOTYPE_METADATA_VALUE_ID,:n.CREDATE,:n.CREUSER,:n.SUBGROUP_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;


SET DEFINE OFF;
/**SUBGROUP_PATTERN_AUD**/
--DROP TRIGGER AUDIT_TRIGGER_SUBGROUP_PATTERN;
CREATE OR REPLACE TRIGGER AUDIT_TRIGGER_SUBGROUP_PATTERN
AFTER DELETE OR INSERT OR UPDATE ON SUBGROUP_PATTERN
REFERENCING OLD AS O NEW AS N 
FOR EACH ROW
DECLARE 
    AUDIT_TYPE NUMBER(1,0);
BEGIN
    AUDIT_TYPE := CASE  
         WHEN INSERTING THEN 0
         WHEN UPDATING THEN 1
         WHEN DELETING THEN 2
    END;
    IF AUDIT_TYPE=2 THEN
        INSERT INTO SUBGROUP_PATTERN_AUD (REVTYPE,ACTIONPATTERN_ID,CREDATE,CREUSER,ID,SUBGROUP_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:o.ACTIONPATTERN_ID,:o.CREDATE,:o.CREUSER,:o.ID,:o.SUBGROUP_ID,:o.UPDDATE,:o.UPDUSER);
    ELSE
        INSERT INTO SUBGROUP_PATTERN_AUD (REVTYPE,ACTIONPATTERN_ID,CREDATE,CREUSER,ID,SUBGROUP_ID,UPDDATE,UPDUSER) VALUES(AUDIT_TYPE,:n.ACTIONPATTERN_ID,:n.CREDATE,:n.CREUSER,:n.ID,:n.SUBGROUP_ID,:n.UPDDATE,:n.UPDUSER);
    END IF;
END;
